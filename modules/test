#!/usr/bin/env python2

import importlib
import os
import sys
import subprocess


def puppet_dump(var):
  """Deeply stringify a variable in Puppet syntax."""
  if isinstance(var, list) or isinstance(var, tuple):
    return '[%s]' % (', '.join(puppet_dump(x) for x in var))
  elif isinstance(var, dict):
    elems = []
    for key, value in var.iteritems():
      elems.append('%s => %s' % (key, puppet_dump(value)))
    return '{%s}' % ', '.join(elems)
  elif isinstance(var, str) or isinstance(var, unicode):
    return '\'%s\'' % var
  return str(var)


def puppet_code(info):
  """Given an info dict, return executable Puppet code."""
  code = ''
  for module, data in info.iteritems():
    code += 'class {\n'
    code += '  \'%s\':\n' % module
    if data:
      for key, value in data.iteritems():
        code += '    %s => %s,\n' % (key, puppet_dump(value))
    code += '}'
  return code


if __name__ == '__main__':
  if len(sys.argv) < 3:
    print 'Usage %s: module host [args ..]' % sys.argv[0]
    sys.exit(1)

  host = sys.argv[2]
  args = sys.argv[3:]
  module = importlib.import_module(sys.argv[1])

  print 'Module requires:'
  if hasattr(module, 'requires'):
    print module.requires(host, *args)
  else:
    print 'Nothing'
  print

  print 'Module generates:'
  if hasattr(module, 'generate'):
    output = module.generate(host, *args)

    puppet_code = puppet_code(dict(output))
    print puppet_code

    # Run puppet in no-op mode and display actions it would have done
    pwd = os.path.dirname(sys.argv[0])
    print
    print 'Puppet executes:'
    subprocess.check_call([
        'puppet', 'apply', '--noop', '--parser', 'future',
        '--modulepath=%s' % pwd, '--execute', puppet_code])
  else:
    print 'Nothing'
